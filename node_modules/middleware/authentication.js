'use strict';

// Private function

/**
 * Returns a boolean indicating if the user is logged in
 *
 * @param {Express.Request} request -  the current request
 * @returns {boolean} - true if user is logged in, false otherwise
 */
function isUserLoggedInThroughSession(request) {
    return request.session.userId !== undefined && request.session.userId !== null;
}

/**
 * Module containing middleware functionalities for authentication
 *
 * @author kvermeer
 */
var Authentication = {

    /**
     * Middleware for requiring authentication for web-app routes
     *
     * @param {Express.request} request - The express request object
     * @param {Express.response} response -  The express response object
     * @param {function} next - the next function in the middleware chain
     */
    requireAuthentication: function(request, response, next) {
        if (isUserLoggedInThroughSession(request)) { // If user is logged in, call next function
            next();
        } else { // If user is not logged in
            response.redirect('/login');
        }
    },

    // Private Method

    /**
     * This function only exists to allow the method to be tested
     */
    _isUserLoggedInThroughSession: isUserLoggedInThroughSession,
};

module.exports = Authentication;
