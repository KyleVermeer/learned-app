/**
 * Controller for basic nugget operations
 * @author kvermeer
 */
 'use strict';

// Dependencies
var BaseComponents = require('webapp/base');
var TagManagement = require('core/tag_management');
var util = require('util');
var marked = require('marked');
function TagController() {}
util.inherits(TagController, BaseComponents.BaseController);

/**
 * Method for viewing a pre-existing tag
 * @param {Express.Request} request - the request object
 * @param {Express.Response} response - the response object
 * @return {void}
 */
TagController.prototype.viewTag = function(request, response) {
    var tagId = request.params.tagId;

    // Use TagCRUDService to actually query the object
    var tagCRUDService = new TagManagement.TagCRUDService();
    tagCRUDService.retrieveTag(tagId).then(function(tag) {
        if (tag) {
            var deserializedTag = {
                tagId: tag.get('tag_id'),
                userId: tag.get('user_id'),
                tagName: tag.get('tag_name'),
                createdAt: tag.get('created_at'),
                updatedAt: tag.get('updated_at')
            };
            response.render('pages/tag/view_tag', deserializedTag);
        } else {
            response.status(500).end();
        }
    });
}

/**
 * Method for serving the page to create a new tag
 * @param {Express.Request} request - the request object
 * @param {Express.Response} response - the response object
 * @return {void}
 */
TagController.prototype.getCreateTagPage = function(request, response) {
    response.render('pages/tag/create_tag');
};

/**
 * Method for handling the submit of a new tag
 * @param {Express.Request} request - the request object
 * @param {Express.Response} response - the response object
 * @return {Promise}
 */
TagController.prototype.createTagSubmit = function(request, response) {
    var tagName = request.body.tag_name;

    // Use TagCRUDService to actually create the object
    var tagCRUDService = new TagManagement.TagCRUDService();
    tagCRUDService.createTag(tagName, this.getCurrentUserId(request)).then(function(data) {
        handleCreateTagResponse(data, response);
    });
};

// Private functions

/**
 * Handler for the createTag() call
 *
 * @param {object} data - data from the createTag call
 * @param {Express.Response} response - the response object
 * @return {void}
 */
function handleCreateTagResponse(data, response) {
    response.setHeader('Content-Type', 'application/json');
    var responseData = JSON.stringify({
        data: {
            tag_id: data.tagId
        }
    });
    response.send(responseData);
};

module.exports = TagController;
